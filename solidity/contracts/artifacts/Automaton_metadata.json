{
	"compiler": {
		"version": "0.8.9+commit.e5eed63a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "creator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "automationId",
						"type": "uint256"
					}
				],
				"name": "AutomationCompleted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "creator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "automationId",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "creator",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "minion",
								"type": "address"
							},
							{
								"components": [
									{
										"internalType": "bytes",
										"name": "data",
										"type": "bytes"
									},
									{
										"internalType": "uint256",
										"name": "gasLimit",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "gasPrice",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "amount",
										"type": "uint256"
									},
									{
										"internalType": "address",
										"name": "target",
										"type": "address"
									}
								],
								"internalType": "struct Automaton.Action",
								"name": "action",
								"type": "tuple"
							},
							{
								"components": [
									{
										"internalType": "address",
										"name": "oracle",
										"type": "address"
									},
									{
										"internalType": "enum Automaton.Comparator",
										"name": "comparator",
										"type": "uint8"
									},
									{
										"internalType": "bytes",
										"name": "subject",
										"type": "bytes"
									}
								],
								"internalType": "struct Automaton.Condition",
								"name": "condition",
								"type": "tuple"
							},
							{
								"internalType": "enum Automaton.State",
								"name": "state",
								"type": "uint8"
							}
						],
						"indexed": false,
						"internalType": "struct Automaton.Automation",
						"name": "automation",
						"type": "tuple"
					}
				],
				"name": "AutomationCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "creator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "automationId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "reason",
						"type": "bytes"
					}
				],
				"name": "AutomationFailed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "minion",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "automationId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "AutomationValueForwarded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newValue",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "prevValue",
						"type": "uint256"
					}
				],
				"name": "FeeCostChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "FundsReceived",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "creator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "minion",
						"type": "address"
					}
				],
				"name": "MinionRegistered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Paused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Unpaused",
				"type": "event"
			},
			{
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"inputs": [],
				"name": "autoId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "automations",
				"outputs": [
					{
						"internalType": "address",
						"name": "creator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "minion",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							},
							{
								"internalType": "uint256",
								"name": "gasLimit",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "gasPrice",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "target",
								"type": "address"
							}
						],
						"internalType": "struct Automaton.Action",
						"name": "action",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "oracle",
								"type": "address"
							},
							{
								"internalType": "enum Automaton.Comparator",
								"name": "comparator",
								"type": "uint8"
							},
							{
								"internalType": "bytes",
								"name": "subject",
								"type": "bytes"
							}
						],
						"internalType": "struct Automaton.Condition",
						"name": "condition",
						"type": "tuple"
					},
					{
						"internalType": "enum Automaton.State",
						"name": "state",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "newFee",
						"type": "uint256"
					}
				],
				"name": "changeFeeCost",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "oracle",
						"type": "address"
					},
					{
						"internalType": "enum Automaton.Comparator",
						"name": "comparator",
						"type": "uint8"
					},
					{
						"internalType": "bytes",
						"name": "subject",
						"type": "bytes"
					}
				],
				"name": "checkCondition",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "clientForMinion",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_autoId",
						"type": "uint256"
					}
				],
				"name": "executeAutomation",
				"outputs": [
					{
						"internalType": "bool",
						"name": "executed",
						"type": "bool"
					},
					{
						"internalType": "bytes",
						"name": "result",
						"type": "bytes"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "fee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "gasOverhead",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "minionFactoryAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "initialFee",
						"type": "uint256"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "initialFee",
						"type": "uint256"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "lastAutoIdChecked",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "paused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "gasPrice",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "subject",
						"type": "bytes"
					},
					{
						"internalType": "enum Automaton.Comparator",
						"name": "comparator",
						"type": "uint8"
					},
					{
						"internalType": "address",
						"name": "oracle",
						"type": "address"
					}
				],
				"name": "setupAutomation",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unpause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "withdrawFees",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"paused()": {
					"details": "Returns true if the contract is paused, and false otherwise."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"events": {
				"FeeCostChanged(uint256,uint256)": {
					"notice": "=== === === === === Events === === === === === ==="
				},
				"MinionRegistered(address,address)": {
					"notice": "=== === === === === Events === === === === === ==="
				}
			},
			"kind": "user",
			"methods": {
				"fee()": {
					"notice": "Service fee"
				},
				"gasOverhead()": {
					"notice": "Stipend gas of 2300 + 2x Transfer gas of 21000. This gas gets allocated in order to call the minion once the condition has been met This call alone costs 21000 intrinsic gas + ~1500 gas for emmiting an event once the automation fullfiled. The rest goes to refund the chainlink keeper for calling (21000) Automaton plus changes (20000~) in the state of automation once executed."
				},
				"initialize(address,uint256)": {
					"notice": "=== === === === === Functions === === === === === === Automation functions responsible for running the automaton logic"
				},
				"initialize(uint256)": {
					"notice": "=== === === === === Function === === === === === ==="
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"solidity/contracts/Automaton.sol": "Automaton"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1",
			"license": "MIT",
			"urls": [
				"bzz-raw://b2ebbbe6d0011175bd9e7268b83de3f9c2f9d8d4cbfbaef12aff977d7d727163",
				"dweb:/ipfs/Qmd5c7Vxtis9wzkDNhxwc6A2QT5H9xn9kfjhx7qx44vpro"
			]
		},
		"@openzeppelin/contracts/security/Pausable.sol": {
			"keccak256": "0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b",
			"license": "MIT",
			"urls": [
				"bzz-raw://72b957861691ebdaa78c52834465c4f8296480fe4f1a12ba72dc6c0c8ac076dd",
				"dweb:/ipfs/QmVz1sHCwgEivHPRDswdt9tdvky7EnWqFmbuk1wFE55VMG"
			]
		},
		"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
			"keccak256": "0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a",
			"license": "MIT",
			"urls": [
				"bzz-raw://6cc5f36034a77d105263ae6d8cc18b16260b4a0f6cdb1a26f21ba3670fdd06dd",
				"dweb:/ipfs/QmdJrJ2LoG546BkfyZPta96BNmaVBfqZoh8kq7PqHuQyPk"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a",
			"license": "MIT",
			"urls": [
				"bzz-raw://39a05eec7083dfa0cc7e0cbfe6cd1bd085a340af1ede93fdff3ad047c5fb3d8e",
				"dweb:/ipfs/QmVApz5fCUq2QC8gKTsNNdCmcedJ3ETHp68zR5N3WUKS4r"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f",
			"license": "MIT",
			"urls": [
				"bzz-raw://26e8b38a7ac8e7b4463af00cf7fff1bf48ae9875765bf4f7751e100124d0bc8c",
				"dweb:/ipfs/QmWcsmkVr24xmmjfnBQZoemFniXjj3vwT78Cz6uqZW1Hux"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeMath.sol": {
			"keccak256": "0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b",
			"license": "MIT",
			"urls": [
				"bzz-raw://163776cbf565c722232393aa2d62cbe8a2ffb5805986abf4906c00e1e07450a6",
				"dweb:/ipfs/QmPZoN9T3cb6o8bGhjBPZcz7im8T8DWhpr3tjLwhJJHx9N"
			]
		},
		"solidity/contracts/Automaton.sol": {
			"keccak256": "0x53d817a58add3ce4076c23da87038a97b47762a24117fe5452ac9bd086c52963",
			"license": "MIT",
			"urls": [
				"bzz-raw://df8a3bb71277b29965c7fddf154f1b8f465c9f133f1dcba82a6e957e614c2c99",
				"dweb:/ipfs/QmSsf5sCVa8hLGDhFADjSBvVuRD9ZM1ccaSgWR7fYpRzC7"
			]
		},
		"solidity/contracts/BaseFeeContract.sol": {
			"keccak256": "0x4eba202c6c16506144cbcffd1be837bc632a6449319ea912a88dd88c52fd051d",
			"license": "MIT",
			"urls": [
				"bzz-raw://1b9b1ba94850f7b41232477d6104c3e3e719110613a6cd685aa99a1c7cc6196a",
				"dweb:/ipfs/QmNcQMyMdm4Z8j7vtQyTPpKcixAcars2qR2jvYf2RJV3t1"
			]
		},
		"solidity/contracts/interfaces/IMinion.sol": {
			"keccak256": "0xbc412c70ecef6db34e969ef3038042a6d1bfe8a94387a8dbb02bc57ab532c1ea",
			"license": "MIT",
			"urls": [
				"bzz-raw://6d05611d83f2417f0f235d24cbe4382f2fa47026ce6fb9026f5294b7b3359a05",
				"dweb:/ipfs/QmdDnzq99pUVmCSH29iZE9rksdsgYuJzRmiu18B8ZMcNgp"
			]
		},
		"solidity/contracts/interfaces/IMinionFactory.sol": {
			"keccak256": "0xa84d5508a9f93b985d5fb788b0b334099ce45f317968bd5105871287e3854269",
			"license": "MIT",
			"urls": [
				"bzz-raw://d68d33825477eadb3a495514fc8e9b504f295fdfad8f0745021bea82da6eda7a",
				"dweb:/ipfs/QmXM8os16baxEqW4LzqwzjBt3mk2w61J6eWmuAbjJon3E4"
			]
		}
	},
	"version": 1
}